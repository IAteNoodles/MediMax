#!/usr/bin/env python3
"""
Quick Environment Setup for AuraDB
Run this script to interactively set up your AuraDB credentials.
"""

import os
import sys
import logging

logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')
logger = logging.getLogger(__name__)

def create_env_file():
    """Interactively create .env file for AuraDB connection."""
    logger.info("🔧 Setting up Neo4j AuraDB credentials")
    logger.info("="*50)
    
    print("\n📋 Please provide your AuraDB connection details:")
    print("(You can find these in your Neo4j AuraDB console)")
    
    # Get URI
    print("\n1. Connection URI (should start with neo4j+s://)")
    print("   Example: neo4j+s://12345678.databases.neo4j.io")
    uri = input("   Enter URI: ").strip()
    
    if not uri.startswith('neo4j+s://'):
        print("⚠️  Warning: AuraDB URIs typically start with 'neo4j+s://'")
        confirm = input("   Continue anyway? (y/N): ").strip().lower()
        if confirm != 'y':
            print("❌ Setup cancelled")
            return False
    
    # Get username
    print("\n2. Username (usually 'neo4j')")
    username = input("   Enter username [neo4j]: ").strip() or "neo4j"
    
    # Get password
    print("\n3. Password")
    print("   (This is the password you set when creating your AuraDB instance)")
    password = input("   Enter password: ").strip()
    
    if not password:
        print("❌ Password cannot be empty")
        return False
    
    # Create .env file
    env_content = f"""# Neo4j AuraDB Configuration
# Generated by setup script
NEO4J_URI={uri}
NEO4J_USERNAME={username}
NEO4J_PASSWORD={password}
"""
    
    try:
        with open('.env', 'w') as f:
            f.write(env_content)
        
        logger.info("✅ Created .env file successfully!")
        
        # Also set environment variables for current session
        os.environ['NEO4J_URI'] = uri
        os.environ['NEO4J_USERNAME'] = username
        os.environ['NEO4J_PASSWORD'] = password
        
        logger.info("✅ Environment variables set for current session")
        
        return True
        
    except Exception as e:
        logger.error(f"❌ Failed to create .env file: {e}")
        return False

def test_connection():
    """Test the connection after setup."""
    print("\n🔍 Testing connection...")
    
    try:
        # Import and run the test
        import subprocess
        result = subprocess.run([sys.executable, 'auradb_test.py'], 
                              capture_output=True, text=True)
        
        if result.returncode == 0:
            print("✅ Connection test passed!")
            return True
        else:
            print("❌ Connection test failed:")
            print(result.stderr)
            return False
            
    except Exception as e:
        print(f"❌ Could not run connection test: {e}")
        return False

def main():
    """Main setup function."""
    print("🚀 Neo4j AuraDB Quick Setup")
    print("="*40)
    
    # Check if .env already exists
    if os.path.exists('.env'):
        print("\n📄 .env file already exists")
        overwrite = input("   Overwrite? (y/N): ").strip().lower()
        if overwrite != 'y':
            print("✅ Using existing .env file")
            if test_connection():
                print("\n🎉 Setup complete! You can now run:")
                print("   python auradb_import.py")
            return
    
    # Create new .env file
    if create_env_file():
        print("\n🔍 Testing connection...")
        if test_connection():
            print("\n🎉 Setup complete! Your AuraDB connection is working!")
            print("\nNext steps:")
            print("1. Run: python auradb_import.py")
            print("2. Check your Neo4j AuraDB console to see the imported data")
        else:
            print("\n⚠️  Setup complete but connection test failed")
            print("Please check your credentials and try:")
            print("   python auradb_test.py")
    else:
        print("\n❌ Setup failed. Please try again.")

if __name__ == "__main__":
    main()